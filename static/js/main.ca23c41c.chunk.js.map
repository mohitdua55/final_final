{"version":3,"sources":["icons_req/icons_FEtask/Img - High Priority.svg","icons_req/icons_FEtask/No-priority.svg","icons_req/icons_FEtask/Img - Low Priority.svg","icons_req/icons_FEtask/Img - Medium Priority.svg","icons_req/icons_FEtask/add.svg","icons_req/icons_FEtask/3 dot menu.svg","components/Column.js","components/TaskModal.js","components/TaskBoard.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Column","_ref","title","tasks","onAddTask","onOpenMenu","getPriorityIcon","priority","lowPriorityIcon","mediumPriorityIcon","highPriorityIcon","noPriorityIcon","React","createElement","className","onClick","src","plusIcon","alt","menuIcon","length","map","task","key","ticketId","userInitials","tag","TaskModal","isOpen","onClose","onSave","setTitle","useState","setPriority","userId","setUserId","onSubmit","e","preventDefault","newTask","id","Date","now","parseInt","status","type","value","onChange","target","required","min","max","TaskBoard","setTasks","users","setUsers","loading","setLoading","error","setError","groupBy","setGroupBy","orderBy","setOrderBy","showOptions","setShowOptions","isModalOpen","setIsModalOpen","currentColumn","setCurrentColumn","useEffect","async","response","axios","get","tickets","data","fetchTasksAndUsers","getUserInitials","user","find","u","name","split","part","join","toUpperCase","groupedTasks","grouped","forEach","groupKey","push","groupTasks","sort","a","b","localeCompare","sortTasks","handleDisplayClick","style","marginTop","htmlFor","Object","keys","group","_users$find","userName","columnName","console","log","prevTasks","updatedTask","handleSaveTask","Header","App","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ca23c41c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Img - High Priority.10cfcedf.svg\";","module.exports = __webpack_public_path__ + \"static/media/No-priority.0d2cbadc.svg\";","module.exports = __webpack_public_path__ + \"static/media/Img - Low Priority.2ad281d3.svg\";","module.exports = __webpack_public_path__ + \"static/media/Img - Medium Priority.861ebea5.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.a19048c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/3 dot menu.6c272d9d.svg\";","\nimport React from \"react\";\n\n// Import the icons (adjust paths according to your project structure)\nimport noPriorityIcon from \"../icons_req/icons_FEtask/No-priority.svg\"; // Adjust the path according to your project structure\nimport lowPriorityIcon from \"../icons_req/icons_FEtask/Img - Low Priority.svg\"; // Adjust the path according to your project structure\nimport mediumPriorityIcon from \"../icons_req/icons_FEtask/Img - Medium Priority.svg\"; // Adjust the path according to your project structure\nimport highPriorityIcon from \"../icons_req/icons_FEtask/Img - High Priority.svg\"; // Adjust the path according to your project structure\n\nimport plusIcon from \"E:/ReactJS/react-project/src/icons_req/icons_FEtask/add.svg\";\nimport menuIcon from \"E:/ReactJS/react-project/src/icons_req/icons_FEtask/3 dot menu.svg\";\n\nconst Column = ({ title, tasks, onAddTask, onOpenMenu }) => {\n  // Helper function to get the correct icon based on priority\n  const getPriorityIcon = (priority) => {\n    switch (priority) {\n      case 1:\n        return lowPriorityIcon;\n      case 2:\n        return mediumPriorityIcon;\n      case 3:\n        return highPriorityIcon;\n      case 4:\n        return highPriorityIcon; // Assuming highPriorityIcon for priority 4 as well\n      default:\n        return noPriorityIcon; // Default or unknown priority\n    }\n  };\n\n  return (\n    <div className=\"column\">\n      <div className=\"column-header\">\n        <h2>{title}</h2>\n\n        {/* Add task button */}\n        <div className=\"column-actions\">\n          <button className=\"icon-button\" onClick={onAddTask}>\n            <img src={plusIcon} alt=\"Add Task\" />\n          </button>\n\n          {/* Menu button */}\n          <button className=\"icon-button\" onClick={onOpenMenu}>\n            <img src={menuIcon} alt=\"Open Menu\" />\n          </button>\n        </div>\n      </div>\n\n      <ul>\n        {tasks.length === 0 ? ( // Check if there are tasks\n          <li>No tasks available</li> // Display a message if no tasks\n        ) : (\n          tasks.map((task) => (\n            <li key={task.ticketId} className={`priority-${task.priority}`}>\n              <div className=\"task-header\">\n                <h4>{task.ticketId}</h4> {/* Display Task ID */}\n                {/* Avatar with initials */}\n                <div className=\"avatar\">{task.userInitials}</div>\n                {/* Move avatar here */}\n              </div>\n\n              <p>{task.title}</p>\n\n              {/* Priority Icon */}\n              <div className=\"priority-icon\">\n                <img\n                  src={getPriorityIcon(task.priority)}\n                  alt={`Priority ${task.priority}`}\n                />\n              </div>\n              <div className=\"tag\">\n                {task.tag} {/* Display the tag */}\n              </div>\n\n              {/* Removed the priority text line */}\n              {/* <p>Priority: {task.priority}</p> */}\n            </li>\n          ))\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Column;\n","\nimport React, { useState } from \"react\";\n\nconst TaskModal = ({ isOpen, onClose, onSave }) => {\n  const [title, setTitle] = useState(\"\");\n  const [priority, setPriority] = useState(1);\n  const [userId, setUserId] = useState(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const newTask = {\n      id: `new-${Date.now()}`,\n      title,\n      priority: parseInt(priority, 10),\n      userId: userId || null,\n      status: \"\", // This should be set to the current column status in TaskBoard\n      tag: \"new\",\n    };\n    onSave(newTask); // Call onSave with the new task\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal-content\">\n        <h2>Add New Task</h2>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <label>Title:</label>\n            <input\n              type=\"text\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              required\n            />\n          </div>\n          <div>\n            <label>Priority:</label>\n            <input\n              type=\"number\"\n              value={priority}\n              onChange={(e) => setPriority(e.target.value)}\n              min=\"1\"\n              max=\"5\"\n              required\n            />\n          </div>\n          <div>\n            <label>User ID:</label>\n            <input\n              type=\"text\"\n              value={userId}\n              onChange={(e) => setUserId(e.target.value)}\n            />\n          </div>\n          <button type=\"submit\">Save</button>\n          <button type=\"button\" onClick={onClose}>\n            Cancel\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskModal;","\nimport React, { useState, useEffect } from \"react\";\nimport Column from \"./Column\";\nimport TaskModal from \"./TaskModal\"; // Import the modal component\nimport axios from \"axios\";\n\nconst TaskBoard = () => {\n  const [tasks, setTasks] = useState([]); // To store tasks fetched from the API\n  const [users, setUsers] = useState([]); // To store user data fetched from the API\n  const [loading, setLoading] = useState(true); // To manage loading state\n  const [error, setError] = useState(null); // To manage error state\n\n  // States for grouping and ordering\n  const [groupBy, setGroupBy] = useState(\"status\"); // Default grouping by status\n  const [orderBy, setOrderBy] = useState(\"priority\"); // Default ordering by priority\n  const [showOptions, setShowOptions] = useState(false); // To show/hide the Display options\n  const [isModalOpen, setIsModalOpen] = useState(false); // State for modal visibility\n  const [currentColumn, setCurrentColumn] = useState(\"\"); // Track the current column for the new task\n  // Function to handle adding a task (You can define actual logic later)\n  const onAddTask = (columnName) => {\n    setCurrentColumn(columnName); // Set the current column for the new task\n    setIsModalOpen(true); // Open the modal\n    const newTask = {\n      id: `new-${Date.now()}`, // Unique ID for the new task\n      title: \"New Task\", // Default title for the new task\n      priority: 1, // Default priority (or any value you prefer)\n      userId: null, // Default user ID (null or any specific user)\n      status: columnName, // Assign the task to the specific column (status)\n      tag: \"new\", // A default tag (optional)\n    };\n    console.log(`Add task to ${columnName}`);\n    setTasks((prevTasks) => [...prevTasks, newTask]);\n    // Add your logic here for adding a new task to the specific column\n  };\n\n  // Function to handle opening the menu\n  const onOpenMenu = (columnName) => {\n    console.log(`Open menu for ${columnName}`);\n    // Add your logic here for opening the menu in the specific column\n  };\n\n  // Fetch tasks and users from API when the component mounts\n  useEffect(() => {\n    const fetchTasksAndUsers = async () => {\n      try {\n        // Fetch data from the API\n        const response = await axios.get(\n          \"https://api.quicksell.co/v1/internal/frontend-assignment\"\n        );\n\n        // Destructure data\n        const { tickets, users } = response.data;\n\n        // Set tasks and users state\n        setTasks(tickets);\n        setUsers(users);\n        setLoading(false);\n      } catch (error) {\n        setError(\"Failed to fetch tasks and users\");\n        setLoading(false);\n      }\n    };\n\n    fetchTasksAndUsers();\n  }, []);\n\n  // Function to save the new task\n  const handleSaveTask = (newTask) => {\n    const updatedTask = { ...newTask, status: currentColumn }; // Ensure the status is set\n    setTasks((prevTasks) => [...prevTasks, updatedTask]); // Add the new task to the tasks array\n    setIsModalOpen(false); // Close the modal after saving\n  };\n\n  // Helper function to get user name by ID (this will no longer be needed)\n  // const getUserName = (userId) => {\n  //   const user = users.find((u) => u.id === userId);\n  //   return user ? user.name : \"Unknown User\";\n  // };\n\n  // Helper function to generate user initials\n  const getUserInitials = (userId) => {\n    const user = users.find((u) => u.id === userId);\n    if (user) {\n      const initials = user.name\n        .split(\" \")\n        .map((part) => part[0])\n        .join(\"\")\n        .toUpperCase();\n      return initials;\n    }\n    return \"NA\"; // Default to 'NA' if the user isn't found\n  };\n\n  // Sorting tasks based on the selected ordering (priority or title)\n  const sortTasks = (tasks) => {\n    return [...tasks].sort((a, b) => {\n      if (orderBy === \"priority\") {\n        return a.priority - b.priority; // Sort by priority (low to high)\n      } else if (orderBy === \"title\") {\n        return a.title.localeCompare(b.title); // Sort by title alphabetically\n      }\n      return 0;\n    });\n  };\n\n  // Grouping tasks based on the selected grouping option\n  const groupTasks = (tasks) => {\n    const grouped = {};\n    tasks.forEach((task) => {\n      const groupKey = task[groupBy]; // Grouping by the selected property\n      if (!grouped[groupKey]) {\n        grouped[groupKey] = [];\n      }\n      grouped[groupKey].push(task);\n    });\n    return grouped;\n  };\n\n  // Loading state\n  if (loading) {\n    return <div>Loading tasks...</div>;\n  }\n\n  // Error state\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  // Handle Display button click\n  const handleDisplayClick = () => {\n    setShowOptions(!showOptions); // Toggle dropdown visibility\n  };\n\n  // Get grouped and sorted tasks\n  const groupedTasks = groupTasks(sortTasks(tasks));\n\n  const doneTasks = [];\n  return (\n    <div>\n      {/* Display button */}\n      <button onClick={handleDisplayClick}>Display</button>\n\n      {/* Display options */}\n      {showOptions && (\n        <div style={{ marginTop: \"10px\" }}>\n          <div>\n            <label htmlFor=\"grouping\">Group By: </label>\n            <select\n              id=\"grouping\"\n              onChange={(e) => setGroupBy(e.target.value)}\n              value={groupBy}\n            >\n              <option value=\"status\">Status</option>\n              <option value=\"userId\">User</option>\n              <option value=\"priority\">Priority</option>\n            </select>\n          </div>\n\n          <div style={{ marginTop: \"10px\" }}>\n            <label htmlFor=\"ordering\">Order By: </label>\n            <select\n              id=\"ordering\"\n              onChange={(e) => setOrderBy(e.target.value)}\n              value={orderBy}\n            >\n              <option value=\"priority\">Priority</option>\n              <option value=\"title\">Title</option>\n            </select>\n          </div>\n        </div>\n      )}\n\n      {/* Task Board columns based on grouping */}\n      <div className=\"task-board\">\n        {Object.keys(groupedTasks).map((group) => (\n          <Column\n            key={group}\n            title={group} // Group name as column title (status, user, priority)\n            tasks={groupedTasks[group].map((task) => ({\n              ...task,\n              ticketId: task.id, // Use ticket 'id' instead of userName\n              userInitials: getUserInitials(task.userId), // Attach initials for avatar\n              userName:\n                users.find((user) => user.id === task.userId)?.name ||\n                \"Unknown User\", // Add this line\n            }))}\n            onAddTask={() => onAddTask(group)} // Pass handler for adding task\n            onOpenMenu={() => onOpenMenu(group)} // Pass handler for opening menu\n          />\n        ))}\n\n        {groupBy === \"status\" && (\n          <Column\n            key=\"done\"\n            title=\"Done\"\n            tasks={doneTasks} // Empty task array for \"Done\" column\n          />\n        )}\n      </div>\n      {/* Modal for adding new task */}\n      <TaskModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        onSave={(newTask) => {\n          handleSaveTask({ ...newTask, status: currentColumn });\n          setIsModalOpen(false); // Close the modal after saving\n        }}\n      />\n    </div>\n  );\n};\n\nexport default TaskBoard;\n","\n// src/components/Header.js\n\nimport React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      {/* <button>Display</button> */}\n      <div className=\"filter-options\">\n        {/* <div>Grouping: Status</div>\n        <div>Ordering: Priority</div> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","// src/App.js\n\nimport React from \"react\";\nimport TaskBoard from \"./components/TaskBoard\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <TaskBoard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}